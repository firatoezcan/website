---
import { SITE } from "@config";
import "@styles/base.css";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }
    <script type="module">
      const themes = ["dark", "light"];
      const getTheme = () => {
        const currentTheme = localStorage.getItem("theme");
        if (themes.includes(currentTheme)) return currentTheme;

        return window.matchMedia("(prefers-color-scheme: light)").matches
          ? "light"
          : "dark";
      };

      const changeTheme = theme => {
        localStorage.setItem("theme", theme);
        document.firstElementChild.setAttribute("data-theme", theme);
        document.querySelector("#theme-btn")?.setAttribute("aria-label", theme);
      };

      // set early so no page flashes / CSS is made aware
      changeTheme(getTheme());

      window.onload = () => {
        changeTheme(getTheme());

        document.querySelector("#theme-btn")?.addEventListener("click", () => {
          const newTheme = getTheme() === "light" ? "dark" : "light";
          changeTheme(newTheme);
        });
      };

      window
        .matchMedia("(prefers-color-scheme: light)")
        .addEventListener("change", ({ matches: isLight }) => {
          const newTheme = isLight ? "light" : "dark";
          changeTheme(newTheme);
        });
    </script>
  </head>
  <body
    class="flex flex-col min-h-screen font-mono bg-skin-fill text-skin-base selection:bg-skin-accent selection:bg-opacity-70 selection:text-skin-inverted"
  >
    <slot />
  </body>
</html>
